// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expression compiler async functions 1`] = `
"async function anonymous(getValue,fns
) {
// =WAIT(5)
let _1 = await fns['WAIT'](this.fromNumber(5))
return _1;
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(getValue,fns
) {
// =? A1 / 2
debugger;
let _1 = this.div(getValue('A1'), this.fromNumber(2));
return _1;
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(getValue,fns
) {
// =A1 + sum(A2:C3)
let _2 = fns.range('A2', 'C3');
let _1 = this.add(getValue('A1'), fns['SUM'](_2));
return _1;
}"
`;

exports[`expression compiler simple values 1`] = `
"function anonymous(getValue,fns
) {
// =1
return this.fromNumber(1);
}"
`;

exports[`expression compiler simple values 2`] = `
"function anonymous(getValue,fns
) {
// =true
return true;
}"
`;

exports[`expression compiler simple values 3`] = `
"function anonymous(getValue,fns
) {
// ='abc'
return 'abc';
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(getValue,fns
) {
// =1 + 3 * 4
let _2 = this.mul(this.fromNumber(3), this.fromNumber(4));
let _1 = this.add(this.fromNumber(1), _2);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(getValue,fns
) {
// =(3 + 1) * (-1 + 4)
let _2 = this.add(this.fromNumber(3), this.fromNumber(1));
let _4 = this.sub(this.fromNumber(0), this.fromNumber(1));
let _3 = this.add(_4, this.fromNumber(4));
let _1 = this.mul(_2, _3);
return _1;
}"
`;
