// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expression compiler async functions 1`] = `
"async function anonymous(getValue,fns
) {
// =WAIT(5)
let _1 = await fns['WAIT'](5)
return _1;
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(getValue,fns
) {
// =? A1 / 2
debugger;
let _2 = getValue('A1')
if (typeof _2 !== 'number' || typeof 2 !== 'number') { throw new Error('Invalid type');}
let _1 = _2 / 2;
return _1;
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(getValue,fns
) {
// =A1 + sum(A2:C3)
let _2 = getValue('A1')
let _4 = fns.range('A2', 'C3');
let _3 = fns['SUM'](_4)
if (typeof _2 !== 'number' || typeof _3 !== 'number') { throw new Error('Invalid type');}
let _1 = _2 + _3;
return _1;
}"
`;

exports[`expression compiler simple values 1`] = `
"function anonymous(getValue,fns
) {
// =1
return 1;
}"
`;

exports[`expression compiler simple values 2`] = `
"function anonymous(getValue,fns
) {
// =true
return true;
}"
`;

exports[`expression compiler simple values 3`] = `
"function anonymous(getValue,fns
) {
// ='abc'
return 'abc';
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(getValue,fns
) {
// =1 + 3
if (typeof 1 !== 'number' || typeof 3 !== 'number') { throw new Error('Invalid type');}
let _1 = 1 + 3;
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(getValue,fns
) {
// =2 * 3
if (typeof 2 !== 'number' || typeof 3 !== 'number') { throw new Error('Invalid type');}
let _1 = 2 * 3;
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 3`] = `
"function anonymous(getValue,fns
) {
// =2 - 3
if (typeof 2 !== 'number' || typeof 3 !== 'number') { throw new Error('Invalid type');}
let _1 = 2 - 3;
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 4`] = `
"function anonymous(getValue,fns
) {
// =2 / 3
if (typeof 2 !== 'number' || typeof 3 !== 'number') { throw new Error('Invalid type');}
let _1 = 2 / 3;
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 5`] = `
"function anonymous(getValue,fns
) {
// =-3
if (typeof 3 !== 'number') { throw new Error('Invalid type');}
let _1 = - 3;
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 6`] = `
"function anonymous(getValue,fns
) {
// =(3 + 1) * (-1 + 4)
if (typeof 3 !== 'number' || typeof 1 !== 'number') { throw new Error('Invalid type');}
let _2 = 3 + 1;
if (typeof 1 !== 'number') { throw new Error('Invalid type');}
let _4 = - 1;
if (typeof _4 !== 'number' || typeof 4 !== 'number') { throw new Error('Invalid type');}
let _3 = _4 + 4;
if (typeof _2 !== 'number' || typeof _3 !== 'number') { throw new Error('Invalid type');}
let _1 = _2 * _3;
return _1;
}"
`;
